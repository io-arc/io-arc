/*!
Create a manifest.json

https://github.com/io-arc/io-arc/tasks/task-manifest
Version: 0.0.0
License: ISC
Copyright (c) 2020 arc one
*/
!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(require("commander"),require("glob"),require("@io-arc/env"),require("rxjs"),require("rxjs/operators"),require("path"),require("js-yaml"),require("fs"),require("@io-arc/path-build"),require("make-dir"),require("@io-arc/logger"),require("kleur"),require("@io-arc/yaml2json"),require("node-watch")):"function"==typeof define&&define.amd?define(["commander","glob","@io-arc/env","rxjs","rxjs/operators","path","js-yaml","fs","@io-arc/path-build","make-dir","@io-arc/logger","kleur","@io-arc/yaml2json","node-watch"],r):r((e=e||self).commander,e.glob,e.env,e.rxjs,e.operators,e.path,e.yaml,e.fs,e.PathBuild,e.mkdir,e.Logger,e.kleur,e.Yaml2Json,e.watch)}(this,(function(e,r,a,t,o,s,n,l,i,c,p,u,m,f){"use strict";r=r&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r,s=s&&Object.prototype.hasOwnProperty.call(s,"default")?s.default:s,n=n&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n,l=l&&Object.prototype.hasOwnProperty.call(l,"default")?l.default:l,i=i&&Object.prototype.hasOwnProperty.call(i,"default")?i.default:i,c=c&&Object.prototype.hasOwnProperty.call(c,"default")?c.default:c,p=p&&Object.prototype.hasOwnProperty.call(p,"default")?p.default:p,m=m&&Object.prototype.hasOwnProperty.call(m,"default")?m.default:m,f=f&&Object.prototype.hasOwnProperty.call(f,"default")?f.default:f;(()=>{e.program.version("0.0.0").parse(process.argv);const d=e=>{const r=new RegExp(".ya?ml$");return t.from(e).pipe(o.map(e=>{const t=s.basename(e).replace(r,".json"),o=n.safeLoad(l.readFileSync(e,"utf8"))||{};return{name:i.relative([a.DIST,t]),base:o}}),o.map(e=>{const{name:r,base:t}=e;return"name"in t&&""!==t.name||(t.name=a.SITE_TITLE),"short_name"in t&&""!==t.short_name||(t.short_name=a.SITE_TITLE),"scope"in t&&""!==t.scope||(t.scope=a.SITE_ROOT),"related_applications"in t&&"object"==typeof t.related_applications||(t.related_applications=[]),{name:r,body:JSON.stringify(t,null,2)}}),o.flatMap(async e=>(await c(s.dirname(e.name)),e)),o.map(e=>{try{return l.writeFileSync(e.name,e.body),e.name}catch(e){throw new Error(e)}}))},y=e=>p.message(`convert to ${e}`,u.green),b=e=>p.failed("manifest",e),O=r.sync(`${a.WS_ROOT}/manifest*.y?(a)ml`);if(a.MODE_ENV===a.MODE.WATCH){const e=new m([a.WS_ROOT],[a.DIST]);e.removeAll(`${a.DIST}/manifest*.json`).subscribe({error(e){b(e)},complete(){p.message("remove for exist manifest*.json files"),d(O).subscribe(y,b,()=>{f(a.WS_ROOT,{recursive:!0,filter:e=>/^(?!_)manifest.*\.ya?ml$/.test(s.basename(e))},(r,a)=>{switch(r){case"update":return void d([a]).subscribe(y,b);case"remove":return void e.remove(a).subscribe(e=>p.message(`remove for ${e}`,u.red));default:return}})})}})}else O.length>0&&d(O).subscribe(y,b,()=>p.complete("manifest"))})()}));
